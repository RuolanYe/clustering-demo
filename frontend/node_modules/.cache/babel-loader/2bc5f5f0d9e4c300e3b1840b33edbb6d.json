{"ast":null,"code":"// import {GET_LEADS} from '../actions/types.js';\nimport imageService from '../actions/imageService';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  images: []\n}; //Get leads\n\nexport const getImages = createAsyncThunk('images/getAll', async (_, thunkAPI) => {\n  try {\n    const response = await imageService.getImages();\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}); //delete lead\n// export const deleteLead = createAsyncThunk(\n//     'Leads/delete',\n//     async (id) => {\n//         try{\n//             // const token = thunkAPI.getState().auth.user.token \n//             return await leadService.deleteLead(id)\n//         }catch (error){\n//             console.log(error)\n//         }\n//     }\n// )\n// //Create lead\n\nexport const createImage = createAsyncThunk('images/create', async (imageData, thunkAPI) => {\n  try {\n    // const token = thunkAPI.getState().auth.user.token\n    return await imageService.createImage(imageData);\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const imagesSlice = createSlice({\n  name: 'image',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getImages.pending, state => {\n      console.log('getImages pending');\n    }).addCase(getImages.fulfilled, (state, action) => {\n      state.images = action.payload; // console.log(action)\n    }).addCase(getImages.rejected, (state, action) => {\n      console.log('getImages rejected');\n      state.message = action.payload;\n    }) // .addCase(deleteLead.pending,(state)=>{\n    //     console.log('deleteLead pending')\n    // })\n    // .addCase(deleteLead.fulfilled,(state,action)=>{\n    //     state.leads = state.leads.filter((lead) => lead.id !== action.meta.arg)\n    // })\n    // .addCase(deleteLead.rejected,(state,action)=>{\n    //     console.log('deleteLead rejected')\n    //     state.message = action.payload\n    // })\n    .addCase(createLead.pending, state => {\n      console.log('createLead pending');\n    }).addCase(createLead.fulfilled, (state, action) => {\n      // console.log('slice')\n      // console.log(state.leads)\n      // console.log(action)\n      state.leads.push(action.payload.data);\n    }).addCase(createLead.rejected, (state, action) => {\n      console.log('createLead rejected');\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = imagesSlice.actions;\nexport default imagesSlice.reducer;","map":{"version":3,"names":["imageService","createSlice","createAsyncThunk","initialState","images","getImages","_","thunkAPI","response","error","console","log","createImage","imageData","imagesSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","createLead","leads","push","data","actions","reducer"],"sources":["/Users/sophiaye/Desktop/mern_projects/Clustering/frontend/src/reducers/imagesSlice.js"],"sourcesContent":["// import {GET_LEADS} from '../actions/types.js';\nimport imageService from '../actions/imageService'\nimport {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\n\nconst initialState = {\n    images: []\n}\n\n\n//Get leads\nexport const getImages = createAsyncThunk('images/getAll', async (_,thunkAPI)=>{\n    try{\n        const response = await imageService.getImages()\n        return response\n    }catch (error){\n        console.log(error)\n    }  \n})\n\n//delete lead\n// export const deleteLead = createAsyncThunk(\n//     'Leads/delete',\n//     async (id) => {\n//         try{\n//             // const token = thunkAPI.getState().auth.user.token \n//             return await leadService.deleteLead(id)\n//         }catch (error){\n//             console.log(error)\n//         }\n//     }\n// )\n\n// //Create lead\nexport const createImage = createAsyncThunk(\n    'images/create',\n    async (imageData, thunkAPI) => {\n        try{\n            // const token = thunkAPI.getState().auth.user.token\n            \n            return await imageService.createImage(imageData)\n        }catch (error){\n            console.log(error)\n        }\n    }\n)\n\nexport const imagesSlice = createSlice({\n    name: 'image',\n    initialState,\n    reducers:{\n        reset: (state) => initialState,\n    },\n    extraReducers: (builder) =>{\n        builder\n        .addCase(getImages.pending,(state)=>{\n            console.log('getImages pending')\n        })\n        .addCase(getImages.fulfilled,(state,action)=>{\n\n            state.images = action.payload\n            // console.log(action)\n        })\n        .addCase(getImages.rejected,(state,action)=>{\n            console.log('getImages rejected')\n            state.message = action.payload\n        })\n        // .addCase(deleteLead.pending,(state)=>{\n        //     console.log('deleteLead pending')\n        // })\n        // .addCase(deleteLead.fulfilled,(state,action)=>{\n\n        //     state.leads = state.leads.filter((lead) => lead.id !== action.meta.arg)\n\n        // })\n        // .addCase(deleteLead.rejected,(state,action)=>{\n        //     console.log('deleteLead rejected')\n        //     state.message = action.payload\n        // })\n        .addCase(createLead.pending,(state)=>{\n            console.log('createLead pending')\n        })\n        .addCase(createLead.fulfilled,(state,action)=>{\n            // console.log('slice')\n            // console.log(state.leads)\n            // console.log(action)\n            state.leads.push(action.payload.data)\n        })\n        .addCase(createLead.rejected,(state,action)=>{\n            console.log('createLead rejected')\n            state.message = action.payload\n        })\n    }\n})\n\nexport const {reset} = imagesSlice.actions\nexport default imagesSlice.reducer"],"mappings":"AAAA;AACA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,SAAQC,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAE;AADS,CAArB,C,CAKA;;AACA,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CAAC,eAAD,EAAkB,OAAOI,CAAP,EAASC,QAAT,KAAoB;EAC3E,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMR,YAAY,CAACK,SAAb,EAAvB;IACA,OAAOG,QAAP;EACH,CAHD,CAGC,OAAOC,KAAP,EAAa;IACVC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;AACJ,CAPwC,CAAlC,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMG,WAAW,GAAGV,gBAAgB,CACvC,eADuC,EAEvC,OAAOW,SAAP,EAAkBN,QAAlB,KAA+B;EAC3B,IAAG;IACC;IAEA,OAAO,MAAMP,YAAY,CAACY,WAAb,CAAyBC,SAAzB,CAAb;EACH,CAJD,CAIC,OAAOJ,KAAP,EAAa;IACVC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;AACJ,CAVsC,CAApC;AAaP,OAAO,MAAMK,WAAW,GAAGb,WAAW,CAAC;EACnCc,IAAI,EAAE,OAD6B;EAEnCZ,YAFmC;EAGnCa,QAAQ,EAAC;IACLC,KAAK,EAAGC,KAAD,IAAWf;EADb,CAH0B;EAMnCgB,aAAa,EAAGC,OAAD,IAAY;IACvBA,OAAO,CACNC,OADD,CACShB,SAAS,CAACiB,OADnB,EAC4BJ,KAAD,IAAS;MAChCR,OAAO,CAACC,GAAR,CAAY,mBAAZ;IACH,CAHD,EAICU,OAJD,CAIShB,SAAS,CAACkB,SAJnB,EAI6B,CAACL,KAAD,EAAOM,MAAP,KAAgB;MAEzCN,KAAK,CAACd,MAAN,GAAeoB,MAAM,CAACC,OAAtB,CAFyC,CAGzC;IACH,CARD,EASCJ,OATD,CASShB,SAAS,CAACqB,QATnB,EAS4B,CAACR,KAAD,EAAOM,MAAP,KAAgB;MACxCd,OAAO,CAACC,GAAR,CAAY,oBAAZ;MACAO,KAAK,CAACS,OAAN,GAAgBH,MAAM,CAACC,OAAvB;IACH,CAZD,EAaA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IAxBA,CAyBCJ,OAzBD,CAyBSO,UAAU,CAACN,OAzBpB,EAyB6BJ,KAAD,IAAS;MACjCR,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACH,CA3BD,EA4BCU,OA5BD,CA4BSO,UAAU,CAACL,SA5BpB,EA4B8B,CAACL,KAAD,EAAOM,MAAP,KAAgB;MAC1C;MACA;MACA;MACAN,KAAK,CAACW,KAAN,CAAYC,IAAZ,CAAiBN,MAAM,CAACC,OAAP,CAAeM,IAAhC;IACH,CAjCD,EAkCCV,OAlCD,CAkCSO,UAAU,CAACF,QAlCpB,EAkC6B,CAACR,KAAD,EAAOM,MAAP,KAAgB;MACzCd,OAAO,CAACC,GAAR,CAAY,qBAAZ;MACAO,KAAK,CAACS,OAAN,GAAgBH,MAAM,CAACC,OAAvB;IACH,CArCD;EAsCH;AA7CkC,CAAD,CAA/B;AAgDP,OAAO,MAAM;EAACR;AAAD,IAAUH,WAAW,CAACkB,OAA5B;AACP,eAAelB,WAAW,CAACmB,OAA3B"},"metadata":{},"sourceType":"module"}